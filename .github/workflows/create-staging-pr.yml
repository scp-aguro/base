# .github/workflows/create-staging-pr.yml
name: Create/Update Staging PR

on:
  pull_request:
    types: [opened, closed]
    branches:
      - dev

jobs:
  manage-staging-pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Create or Update Staging PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            async function findStagingPR() {
              const prs = await github.rest.pulls.list({
                owner,
                repo,
                state: 'open',
                base: 'staging',
                head: 'dev'
              });
              return prs.data.find(pr => pr.title.startsWith('dev→staging'));
            }
            
            async function getRelatedPRs() {
              const prs = await github.rest.pulls.list({
                owner,
                repo,
                state: 'open',
                base: 'dev'
              });
              return prs.data.filter(pr => !pr.title.startsWith('dev→staging'));
            }
            
            async function createPRBody(relatedPRs) {
              let body = '# Related PRs\n\n';
              for (const pr of relatedPRs) {
                body += `- [#${pr.number}](${pr.html_url}) ${pr.title}\n`;
              }
              return body;
            }
            
            async function updatePRTitle(prNumber, relatedPRs) {
              if (relatedPRs.length === 0) return;
              
              const dates = relatedPRs.map(pr => new Date(pr.created_at));
              const oldestDate = new Date(Math.min(...dates)).toISOString().split('T')[0];
              const newestDate = new Date(Math.max(...dates)).toISOString().split('T')[0];
              
              const newTitle = `dev→staging ${oldestDate}-${newestDate}`;
              
              await github.rest.pulls.update({
                owner,
                repo,
                pull_number: prNumber,
                title: newTitle
              });
            }
            
            const existingPR = await findStagingPR();
            const relatedPRs = await getRelatedPRs();
            
            if (!existingPR && relatedPRs.length > 0) {
              // Create new PR
              const prBody = await createPRBody(relatedPRs);
              const newPR = await github.rest.pulls.create({
                owner,
                repo,
                title: 'dev→staging',
                head: 'dev',
                base: 'staging',
                body: prBody
              });
              
              await updatePRTitle(newPR.data.number, relatedPRs);
            } else if (existingPR) {
              // Update existing PR
              const prBody = await createPRBody(relatedPRs);
              await github.rest.pulls.update({
                owner,
                repo,
                pull_number: existingPR.number,
                body: prBody
              });
              
              await updatePRTitle(existingPR.number, relatedPRs);
            }

      - name: Handle PR Closure
        if: github.event.action == 'closed' && !github.event.pull_request.merged
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const stagingPR = await findStagingPR();
            
            if (stagingPR) {
              const body = stagingPR.body.replace(
                `- [#${context.payload.pull_request.number}](${context.payload.pull_request.html_url}) ${context.payload.pull_request.title}\n`,
                ''
              );
              
              await github.rest.pulls.update({
                owner,
                repo,
                pull_number: stagingPR.number,
                body
              });
            }
